(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{464:function(e,a,t){"use strict";t.r(a);var n,c=t(63),r=t.n(c),l=t(13),i=t.n(l),u=t(0),m=t.n(u),s=t(6),o=t(459),d=t.n(o),b=t(308),p=t.n(b),v=t(264),f=t.n(v),E=t(1),g=t(284),O=t(40),j=t(280),h=t(324),y=t(3),k=t.n(y),N=t(30),w=t.n(N),S=t(67),T=t.n(S),R=t(288),x=t(257),C=t(256),_=t(68),q=t(43),F=E.default.div(n||(n=i()(["\n    margin-left: 270px !important;\n    width: 150px;\n\n    .save_btn {\n        width: 100%;\n    }\n"])));function I(e){var a=e.serviceName,t=Object(u.useRef)(),n=Object(u.useState)(null),c=r()(n,2),l=c[0],i=c[1],o=Object(u.useState)(!1),d=r()(o,2),b=d[0],p=d[1],v=Object(u.useState)({}),f=r()(v,2),E=f[0],g=f[1];Object(u.useEffect)((function(){Object(x.a)({serviceName:"settings/".concat(a),handleError:!0,callbackOnError:function(e){e.uccErrorCode="ERR0005",i(e)}}).then((function(e){g(e.data.entry[0].content)}))}),[a]);if(null!=l&&l.uccErrorCode)throw l;return Object.keys(E).length?m.a.createElement(m.a.Fragment,null,m.a.createElement(R.a,{ref:t,page:q.a,stanzaName:a,serviceName:"settings",mode:C.b,currentServiceState:E,handleFormSubmit:function(e){p(e)}}),m.a.createElement(F,null,m.a.createElement(w.a,{className:"saveBtn",appearance:"primary",label:b?m.a.createElement(T.a,null):Object(s._)("Save"),onClick:function(){t.current.handleSubmit()},disabled:b}))):m.a.createElement(_.d,null)}I.propTypes={serviceName:k.a.string.isRequired};var J=I,z=t(255),A=t(323),B=t(285);function D(e){var a=e.serviceName,t=e.serviceTitle,n=Object(u.useState)(!1),c=r()(n,2),l=c[0],i=c[1],s="Add ".concat(t),o=function(){i(!1)};return m.a.createElement(m.a.Fragment,null,m.a.createElement(z.a,{value:null},m.a.createElement(A.a,{page:q.a,serviceName:a,handleRequestModalOpen:function(){i(!0)}}),l?m.a.createElement(B.a,{page:q.a,open:l,handleRequestClose:o,handleSaveData:function(){},serviceName:a,mode:C.c,formLabel:s}):null))}D.propTypes={serviceName:k.a.string.isRequired,serviceTitle:k.a.string.isRequired};var L,M=Object(u.memo)(D),G=Object(E.default)(f.a.Row)(L||(L=i()(["\n    padding: 5px 0px;\n\n    .dropdown {\n        text-align: right;\n    }\n\n    .input_button {\n        text-align: right;\n        margin-right: 0px;\n    }\n"])));a.default=function(){var e=Object(O.d)().pages.configuration,a=e.title,t=e.description,n=e.tabs,c=n.map((function(e){return e.name})),l=Object(u.useState)(n[0].name),i=r()(l,2),o=i[0],b=i[1],v=Object(g.a)();Object(u.useEffect)((function(){v&&c.includes(v.get("tab"))&&v.get("tab")!==o&&b(v.get("tab"))}),[]);var E=Object(u.useCallback)((function(e,a){var t=a.selectedTabId;b(t)}),[o]);return m.a.createElement(h.a,null,m.a.createElement(f.a,{gutter:8},m.a.createElement(G,null,m.a.createElement(f.a.Column,{span:9},m.a.createElement(j.b,null,Object(s._)(a)),m.a.createElement(j.a,null,Object(s._)(t||""))))),m.a.createElement(d.a,{activeTabId:o,onChange:E},n.map((function(e){return m.a.createElement(d.a.Tab,{key:e.name,label:Object(s._)(e.title),tabId:e.name})}))),n.map((function(e){return e.table?m.a.createElement("div",{key:e.name,style:e.name!==o?{display:"none"}:{display:"block"},id:"".concat(e.name,"Tab")},m.a.createElement(M,{key:e.name,serviceName:e.name,serviceTitle:e.title})):m.a.createElement("div",{key:e.name,style:e.name!==o?{display:"none"}:{display:"block"},id:"".concat(e.name,"Tab")},m.a.createElement(J,{key:e.name,serviceName:e.name}))})),m.a.createElement(p.a,{position:"top-right"}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,