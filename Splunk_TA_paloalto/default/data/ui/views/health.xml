
        <dashboard version="2" theme="light" hiddenElements="{&quot;hideEdit&quot;:false,&quot;hideOpenInSearch&quot;:false,&quot;hideExport&quot;:false}">
            <label>Health</label>
            <description></description>
            <definition><![CDATA[{"visualizations":{"viz_AEtfMCF3":{"type":"splunk.singlevalue","options":{"colorMode":"none","drilldown":"none","numberPrecision":0,"refresh.display":"progressbar","sparklineDisplay":"below","trendDisplay":"absolute","trellis.enabled":0,"trellis.scales.shared":1,"trellis.size":"medium","trendInterval":"-1h","underLabel":"Sourcetypes","unitPosition":"after","shouldUseThousandSeparators":true},"dataSources":{"primary":"ds_M6lajdjT_ds_search_1"},"context":{"convertedColorRange":[{"to":0,"value":"#1C6B2D"},{"from":0,"value":"#9E2520"}]}},"viz_No2PrHT4":{"type":"splunk.table","dataSources":{"primary":"ds_Q2DRgqr8"},"title":"Internal Log Error Messages","description":"Detects error messages in the internal index"},"viz_LuZ0VTiM":{"type":"splunk.singlevalue","options":{"colorMode":"none","drilldown":"none","numberPrecision":0,"refresh.display":"progressbar","trendDisplay":"absolute","trellis.enabled":0,"trellis.scales.shared":1,"trellis.size":"medium","trendInterval":"-1h","underLabel":"Error Messages","unitPosition":"after","shouldUseThousandSeparators":true,"sparklineDisplay":"off"},"dataSources":{"primary":"ds_1BH9njFl_ds_M6lajdjT_ds_search_1"},"context":{"convertedColorRange":[{"to":0,"value":"#1C6B2D"},{"from":0,"value":"#9E2520"}]},"title":""},"viz_gEIv2qWf":{"type":"splunk.table","dataSources":{"primary":"ds_yAsDSepL"},"title":"Sourcetypes Detected"},"viz_Oi8XSHCG":{"type":"splunk.table","dataSources":{"primary":"ds_PUFfsq8q"},"title":"Health Checks","options":{"columnFormat":{"severity_level":{"data":"> table | seriesByName(\"severity_level\") | formatByType(severity_levelColumnFormatEditorConfig)","rowColors":"> table | seriesByName('severity_level') | pick(severity_levelRowColorsEditorConfig)","rowBackgroundColors":"> table | seriesByName(\"severity_level\") | rangeValue(severity_levelRowBackgroundColorsEditorConfig)"}}},"context":{"severity_levelColumnFormatEditorConfig":{"number":{"thousandSeparated":false,"unitPosition":"after"}},"severity_levelRowColorsEditorConfig":["#3c444d"],"severity_levelRowBackgroundColorsEditorConfig":[{"value":"#118832","to":1},{"value":"#9D9F0D","from":1,"to":2},{"value":"#D97A0D","from":2,"to":3},{"value":"#D41F1F","from":3}]}}},"dataSources":{"ds_M6lajdjT_ds_search_1":{"type":"ds.search","options":{"query":"sourcetype=\"pan:*\" | stats dc(sourcetype)"},"name":"Sourcetypes Counter"},"ds_1BH9njFl_ds_M6lajdjT_ds_search_1":{"type":"ds.search","options":{"query":"index=\"_internal\" log_level=\"ERROR\" pan | stats dc(event_message)"},"name":"Error Message Count"},"ds_yAsDSepL":{"type":"ds.search","options":{"query":"sourcetype=\"pan:*\" | stats latest(_time) as Time, count by sourcetype | eval Last Seen=strftime(Time,\"%Y-%m-%d %H:%M:%S\") | table sourcetype, count, \"Last Seen\" \n| sort by count desc"},"name":"Sourcetypes Detected"},"ds_Q2DRgqr8":{"type":"ds.search","options":{"query":"index=\"_internal\" log_level=\"ERROR\" pan | stats count by event_message, source"},"name":"Log error message count"},"ds_PUFfsq8q":{"type":"ds.search","options":{"query":"index=\"_internal\" source=\"/opt/splunk/var/log/splunk/splunk_ta_paloalto_cortex_xdr.log\" earliest=-2m | search _raw=\"*XDR API Returned Successfully*\" OR _raw=\"*401 Client Error:*\" | head 1 | rex field=_raw \"Message: (?<message>.*)\" | eval severity_level=if(like(message, \"401 Client Error%\"),\"3\",\"0\") | eval Results=case(severity_level==\"3\", \"❗Invalid Cortex XDR API Key or ID\", severity_level==\"0\",\"✅ This health check item was successful.\", false(), \"⏹️ ️This health check item is not applicable.\") | eval Check=\"Cortex XDR API Validation\"\n| table Check Results \"Learn More\" \n| append [| search sourcetype=\"pan:*\" earliest=-24h | dedup sourcetype | fields host sourcetype splunk_server | stats list(sourcetype) as sourcetypes by splunk_server | eval invalid_sourcetypes=mvfilter(sourcetypes==\"pan:log\" OR sourcetypes==\"pan:firewall\") | eval severity_level=if(isnull(invalid_sourcetypes), \"0\", \"3\") | eval Check=\"Valid Palo Alto Networks Sourcetypes\" | eval Results=case(severity_level==\"3\", \"❗Invalid sourcetypes detected.\",severity_level==\"0\",\"✅ This health check item was successful.\",false(),\"⏹️ This health check item is not applicable.\") | table Check Results \"Learn More\"]\n| append [| search sourcetype=pan:*  sourcetype!=\"pan:iot_*\" sourcetype!=\"pan:xdr_incident\"  sourcetype!=\"pan:aperture\"  sourcetype!=\"pan:firewall_cloud\" | dedup sourcetype | rex field=_raw \"^(?:[^,]*,){6}(?<time_field>[^,]*)\" | eval valid_time=strptime(time_field, \"%Y/%m/%d %H:%M:%S\") | eval severity_level=if(isnull(valid_time), 3, 0) | eval Check=sourcetype.\" Timestamp Compatibility\" | eval Results=case(severity_level==\"3\", \"❗Timestamp format is incorrect. Make sure logs from Firewall or Panorama is sent via syslog BSD with default formatting.\",severity_level==\"0\",\"✅ This health check item was successful.\",false(),\"⏹️ This health check item is not applicable.\") | table  Check Results \"Learn More\"]\n| append [ | search sourcetype=\"pan:*\" latest=+1mon earliest=now | stats count | eval severity_level = case(count > \"0\", 3, false(), 0) | eval Check=\"Timestamp Validation\" | eval Results=case(severity_level==\"3\", \"❗Log sourcetypes with timestamps detected in the future.\",severity_level==\"0\",\"✅ This health check item was successful.\",false(),\"⏹️ This health check item is not applicable.\") | table Check Results \"Learn More\"] \n| append [| search index=\"_internal\" source=\"/opt/splunk/var/log/python_upgrade_readiness_app/scan_summary/scan_summary.json\"| head 1 | spath output=name {}.name | spath output=scanType {}.scanType | spath output=details {}.details | spath output=status {}.status | eval combined=mvzip(mvzip('name', 'details',\"|\"), mvzip('scanType', 'status', \"|\"), \"|\") | fields combined, host | mvexpand combined | makemv delim=\"|\", combined | eval name=mvindex(combined, 0) | eval details=mvindex(combined,1) | eval scanType=mvindex(combined, 2) | eval status=mvindex(combined, 3)| eval severity_level=case(status==\"BLOCKER\",\"3\",status==\"PASSED\", \"0\")  | search scanType=\"appPythonUpradeReadinessScanDetails\" AND (name=\"Splunk_TA_paloalto\" OR name=\"SplunkforPaloAltoNetworks\") | eval Check=name.\" Python 2 Artifacts\" | eval Results=case(severity_level==\"3\", \"❗ \".name.\" is not compatible with Python 3.\",severity_level==\"0\",\"✅ This health check item was successful.\",false(),\"⏹️ This health check item is not applicable.\") | table Check Results \"Learn More\"] \n| append [ | search index=\"_internal\" source=\"/opt/splunk/var/log/python_upgrade_readiness_app/scan_summary/scan_summary.json\"| head 1 | spath output=name {}.name | spath output=scanType {}.scanType | spath output=details {}.details | spath output=status {}.status | eval combined=mvzip(mvzip('name', 'details',\"|\"), mvzip('scanType', 'status', \"|\"), \"|\") | fields combined, host | mvexpand combined | makemv delim=\"|\", combined | eval name=mvindex(combined, 0) | eval details=mvindex(combined,1) | eval scanType=mvindex(combined, 2) | eval status=mvindex(combined, 3)| eval severity_level=case(status==\"BLOCKER\",\"3\",status==\"PASSED\", \"0\")  | search scanType=\"appJqueryUpradeReadinessScanDetails\" AND (name=\"Splunk_TA_paloalto\" OR name=\"SplunkforPaloAltoNetworks\") | eval Check=name.\" jQuery Artifacts\" | eval Results=case(severity_level==\"3\", \"❗ \".name.\" is not compatible with jQuery.\",severity_level==\"0\",\"✅ This health check item was successful.\",false(),\"⏹️ This health check item is not applicable.\") | table Check Results \"Learn More\"] \n| append [| search sourcetype=\"pan:firewall_cloud\" earliest=-15m | eval isJSON = if(json_valid(_raw), 0, 1) | stats count by isJSON | eval severity_level=case(isJSON==0 AND count>0, 0, isJSON==1 and count > 0, 3) | eval Results = case(severity_level=3, \"❗ Invalid JSON detected for Cortex Logs\", severity_level==\"0\",\"✅ This health check item was successful.\",false(),\"⏹️ This health check item is not applicable.\") | eval Check=\"Cortex Log Format\" | table Check Results \"Learn More\"] \n| append [ | search rest /servicesNS/nobody/SplunkforPaloAltoNetworks/admin/summarization by_tstats=t splunk_server=local count=0 | search eai:acl.app=SplunkforPaloAltoNetworks | eval datamodel=replace('summary.id',\"DM_\".'eai:acl.app'.\"_\",\"\") | stats list(datamodel) as datamodels by splunk_server | eval total_count = mvcount(datamodels) | eval severity_level=case(total_count=\"2\", 0, total_count=\"0\", 3, total_count=\"1\",1) | eval Check=\"Datamodel Acceleration\" | eval Results=case(severity_level==\"3\", \"❗Datamodels are not enabled. \", severity_level=\"1\", \"⚠️ One or more datamodels are not enabled. \", severity_level==\"0\",\"✅ This health check item was successful.\",false(),\"⏹️ This health check item is not applicable.\") | table Check Results \"Learn More\"] | sort Results desc","queryParameters":{}},"name":"Main Health Check Search"}},"defaults":{"dataSources":{"global":{"options":{"queryParameters":{"latest":"$global_time.latest$","earliest":"$global_time.earliest$"}}}}},"inputs":{"input_global_trp":{"type":"input.timerange","options":{"token":"global_time","defaultValue":"-24h@h,now"},"title":"Global Time Range"}},"layout":{"type":"absolute","options":{"height":2000,"display":"auto-scale"},"globalInputs":["input_global_trp"],"structure":[{"item":"viz_AEtfMCF3","type":"block","position":{"x":0,"y":330,"w":160,"h":160}},{"item":"viz_No2PrHT4","type":"block","position":{"x":170,"y":790,"w":1020,"h":330}},{"item":"viz_LuZ0VTiM","type":"block","position":{"x":0,"y":790,"w":160,"h":160}},{"item":"viz_gEIv2qWf","type":"block","position":{"x":170,"y":330,"w":1020,"h":450}},{"item":"viz_Oi8XSHCG","type":"block","position":{"x":0,"y":20,"w":1200,"h":300}}]},"title":"Health","description":""}]]></definition>
            <assets><![CDATA[{}]]></assets>
        </dashboard>